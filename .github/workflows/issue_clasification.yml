name: Issue Classification with Groq

on:
  issues:
    types: [opened, edited]

permissions:
  issues: write
  contents: read

jobs:
  classify-issue:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install groq PyGithub

      - name: Classify issue using Groq
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        run: |
          import os
          from github import Github
          from groq import Groq

          g = Github(os.environ['GITHUB_TOKEN'])
          repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
          issue = repo.get_issue(number=int(os.environ['GITHUB_REF_NAME']))

          client = Groq(api_key=os.environ['GROQ_API_KEY'])

          issue_content = issue.title + "\n\n" + issue.body

          chat_completion = client.chat.completions.create(
              messages=[
                  {
                      "role": "system",
                      "content": "You're a helpful project manager and your goal is to triage GitHub issues by adding respective labels to the issues as they're updated.\n\nClassify each issue by checking the appropriate title, body and description, comments as a whole and propose of it. Apply maximum 5 labels with 1 word or max 2 words separated by - or _, you can be creative if you will and add some GitHub Sup",
                  },
                  {
                      "role": "user", 
                      "content": issue_content,
                  }
              ],
              model="llama3-8b-8192",
          )

          labels = []
          for chunk in chat_completion:
              content = chunk.choices[0].message.content.strip()
              if content and len(labels) < 5:
                  labels.append(content)

          labels = list(set(labels))  # Remove duplicates
          issue.add_to_labels(*[repo.get_label(label) for label in labels])
          issue.create_comment(f"Issue classified with labels: {', '.join(labels)}")
