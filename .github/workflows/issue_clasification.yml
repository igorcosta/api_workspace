name: Issue Classification with Groq

on:
  issues:
    types: [opened, edited]

permissions:
  issues: write
  contents: read

jobs:
  classify-issue:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: pip install groq PyGithub

      - name: Extract issue number
        id: get-issue-number
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.issue.number;
            core.setOutput('issue_number', issueNumber);

      - name: Validate issue number
        run: |
          if [ -z "${{ steps.get-issue-number.outputs.issue_number }}" ] || [ "${{ steps.get-issue-number.outputs.issue_number }}" -eq "0" ]; then
            echo "Issue number is invalid."
            exit 1
          fi

      - name: Classify issue using Groq
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          ISSUE_NUMBER: ${{ steps.get-issue-number.outputs.issue_number }}
        run: |
          import os
          from github import Github
          from github.GithubException import UnknownObjectException
          from groq import Groq, APIConnectionError, APIStatusError

          g = Github(os.environ['GITHUB_TOKEN'])
          repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
          issue = repo.get_issue(number=int(os.environ['ISSUE_NUMBER']))

          # Gather issue content, including comments
          issue_content = issue.title + '\n\n' + issue.body
          comments = issue.get_comments()
          for comment in comments:
            issue_content += '\n\n' + comment.body

          def ensure_label_exists(repo, label_name):
              try:
                  return repo.get_label(label_name)
              except UnknownObjectException:
                  return repo.create_label(name=label_name, color='000000')

          client = Groq(api_key=os.environ['GROQ_API_KEY'])

          try:
              chat_completion = client.chat.completions.create(
                  messages=[
                      {
                          "role": "system",
                          "content": "You're a helpful project manager and your goal is to triage GitHub issues by adding respective labels to the issues as they're updated.\n\nClassify each issue by checking the appropriate title, body and description, comments as a whole and propose of it. Apply maximum 5 labels with 1 word or max 2 words separated by - or _, you can be creative if you will and add some GitHub Sup",
                      },
                      {
                          "role": "user",
                          "content": issue_content,
                      }
                  ],
                  model="llama3-8b-8192",
              )
              print("API Response:", chat_completion)
              labels = []
              for chunk in chat_completion.choices:
                  content = chunk.message.content.strip()
                  if content and len(labels) < 5:
                      labels.append(content)

              labels = list(set(labels))  # Remove duplicates
              ensured_labels = [ensure_label_exists(repo, label) for label in labels]
              issue.add_to_labels(*ensured_labels)
              issue.create_comment(f"Issue classified with labels: {', '.join(labels)}")
          except APIConnectionError as e:
              print("Failed to connect to Groq API:", e)
          except APIStatusError as e:
              print(f"API Error {e.status_code}: {e.response}")
        shell: python

      - name: Job output
        run: echo "Issue classification completed."
