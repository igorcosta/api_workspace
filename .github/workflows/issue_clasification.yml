name: Issue Classification with Groq

on:
  issues:
    types: [opened, edited]

jobs:
  classify-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Groq SDK
        run: npm install groq-sdk

      - name: Classify issue using Groq
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        run: |
          const Groq = require('groq-sdk');
          const groq = new Groq({apiKey: process.env.GROQ_API_KEY});
          const { context } = require('actions/github');
          async function main() {
            const issueContent = context.payload.issue.title + "\n\n" + context.payload.issue.body;
            const chatCompletion = await groq.chat.completions.create({
              "messages": [
                {
                  "role": "system",
                  "content": "You're a helpful project manager and your goal is to triage GitHub issues by adding respective labels to the issues as they're updated.\n\nClassify each issue by checking the appropriate title, body and description, comments as a whole and propose of it. Apply maximum 5 labels with 1 word or max 2 words separated by - or _, you can be creative if you will and add some GitHub Sup
                },
                {
                  "role": "user",
                  "content": issueContent
                }
              ],
              "model": "llama3-8b-8192",
              "temperature": 1,
              "max_tokens": 1024,
              "top_p": 1,
              "stream": true,
              "stop": null
            });

            let labels = [];
            for await (const chunk of chatCompletion) {
              const content = chunk.choices[0]?.delta?.content || '';
              if (content && labels.length < 5) {
                labels.push(content.trim());
              }
            }
            labels = [...new Set(labels)]; // Remove duplicates

            // Code to add labels to the issue and post a comment with classification feedback
          }
          main();
